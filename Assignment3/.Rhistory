which.min(val_errors)
coef(mod3, 12)
install.packages("gam")
library(gam)
n <- which.min(val_errors)
coef(mod3, n)
valnames <- names(coef(mod3, id = n))
valnames <- names(coef(mod3, id = n))[-1]
mod4 <- lm(Outstate ~ valnames, data = clg_training)
mod4 <- lm(Outstate ~ clg_training[, valnames], data = clg_training)
valnames <- names(coef(mod3, id = n))[-1]
mod4 <- lm(Outstate ~ clg_training[, valnames], data = clg_training)
valnames
valnames <- valnames[-1]
mod4 <- lm(Outstate ~ Private + clg_training[, valnames], data = clg_training)
train_matrix <- clg_training[ , valnames]
View(train_matrix)
train_matrix <- clg_training[ , c("Private",valnames)]
mod4 <- lm(Outstate ~ ., data = train_matrix)
train_matrix <- clg_training[ , c("Outstate","Private",valnames)]
mod4 <- lm(Outstate ~ ., data = train_matrix)
summary(mod4)
valnames <- valnames[-"PrivateYes"]
valnames <- valnames[-c("PrivateYes")]
valnames <- valnames[valnames != "PrivateYes"]
plot(x = Private, y = Outstate, data = train_matrix)
ggplot(train_matrix) + geom_point(aes(x = Private, y = Outstate))
ggplot(train_matrix) + geom_point(aes(x = Private, y = Outstate)) + geom_count()
ggplot(train_matrix, aes(x = Private, y = Outstate)) + geom_point() + geom_count()
ggplot(train_matrix, aes(x = Private, y = Outstate)) + geom_point() + geom_boxplot()
ggplot(train_matrix, aes(x = Private, y = Outstate)) + geom_point() + geom_violin()
ggplot() + geom_point(aes(x = train_matrix$Outstate, y = mod4$fitted.values))
ggplot() + geom_point(aes(x = train_matrix$Outstate, y = mod4$fitted.values))
ggplot() + geom_point(aes(x = train_matrix$Outstate, y = mod4$fitted.values)) +
geom_abline(slope = 1, intercept = 0, color = 2, alpha = 0.8)
ggplot() + geom_point(aes(x = train_matrix$Outstate, y = mod4$fitted.values)) +
geom_abline(slope = 1, intercept = 0, color = 2, alpha = 0.8)
ggplot() + geom_point(aes(x = train_matrix$Outstate, y = mod4$fitted.values)) +
geom_abline(slope = 1, intercept = 0, color = 2) +
labs(xlim = c(2000, 23000), ylim = c(2000, 23000))
library(gam)
valnames <- valnames[valnames != "PrivateYes"]
train_matrix <- clg_training[ , c("Outstate","Private",valnames)]
mod4 <- lm(Outstate ~ ., data = train_matrix)
ggplot() + geom_point(aes(x = train_matrix$Outstate, y = mod4$fitted.values)) +
geom_abline(slope = 1, intercept = 0, color = 2)
plot(mod4)
plot.gam(mod4)
library(gam)
plot.gam(mod4)
plot.Gam(mod4)
plot.Gam(mod4, , se=True, col ="blue")
plot.Gam(mod4, se = TRUE, col ="blue")
par(mfrow = c(3, 4))
plot.Gam(mod4, se = TRUE, col ="blue")
library(gam)
valnames <- valnames[valnames != "PrivateYes"]
train_matrix <- clg_training[ , c("Outstate","Private",valnames)]
mod4 <- lm(Outstate ~ ., data = train_matrix)
par(mfrow = c(3, 4))
plot.Gam(mod4, se = TRUE, col ="blue")
library(leaps)
set.seed(527)
inTrain <- sample(1:nrow(College), .7 *nrow(College))
clg_training <- College[inTrain, ]
clg_testing <- College[-inTrain, ]
mod3 <- regsubsets(Outstate ~ ., data = clg_training, nvmax = 17, method = "forward")
test.mat <- model.matrix(Outstate ~ ., data = clg_testing)
val_errors <- rep(0, 17)
for(i in 1:17){
coefi <- coef(mod3, id = i)
pred <- test.mat[, names(coefi)]%*%coefi
val_errors[i] <- mean((clg_testing$Outstate - pred)^2)
}
n <- which.min(val_errors)
coef(mod3, n)
valnames <- names(coef(mod3, id = n))[-1]
pred <- predict.Gam(mod4, newdata = clg_testing)
sum(mod4$residuals^2)
sum((clg_testing$Outstate - pred) ^2)
sum(mod4$residuals^2)/nrow(train_matrix)
sum((clg_testing$Outstate - pred) ^2)/nrow(clg_testing)
plot(x = clg_testing$Outstate, y = pred)
pred <- predict.Gam(mod4, newdata = clg_testing)
sum(mod4$residuals^2)/nrow(train_matrix) #MSE of training set
sum((clg_testing$Outstate - pred) ^2)/nrow(clg_testing) #MSE of testing set
plot(x = clg_testing$Outstate, y = pred)
plot(x = clg_testing$Outstate, y = pred) + abline(a=1, b=0)
plot(x = clg_testing$Outstate, y = pred) + abline(a=0, b=1)
plot(x = clg_testing$Outstate, y = pred) + abline(a=0, b=1, col = "red")
pred <- predict.Gam(mod4, newdata = clg_testing)
sum(mod4$residuals^2)/nrow(train_matrix) #MSE of training set
sum((clg_testing$Outstate - pred) ^2)/nrow(clg_testing) #MSE of testing set
plot(x = clg_testing$Outstate, y = pred, xlab = "Out-of-State Tuition", ylab = "Predicted Value") +
abline(a=0, b=1, col = "red")
pred <- predict.Gam(mod4, newdata = clg_testing)
sum(mod4$residuals^2)/nrow(train_matrix) #MSE of training set
sum((clg_testing$Outstate - pred) ^2)/nrow(clg_testing) #MSE of testing set
plot(x = clg_testing$Outstate, y = pred, xlab = "Out-of-State Tuition", ylab = "Predicted Value")
abline(a=0, b=1, col = "red")
set.seed(1017)
y <- rnorm(100, 3, 2)
x1 <- rnorm(100, 0, 1)
x2 <- rnorm(100, -1, 2)
beta1 <- 3
a <- y - beta1 * x1
beta2 <- lm(a ~ x2)$coef[2]
a <- y - beta2 * x2
beta1 <- lm(a ~ x1)$coef[2]
coefTable <- data.frame(cbind(b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
y <- rnorm(100, 3, 2)
x1 <- rnorm(100, 0, 1)
x2 <- rnorm(100, -1, 2)
beta1 <- 3
coefTable <- data.frame(cbind(b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
for(i in 1:1000){
a <- y - beta1 * x1
coefTable$b2[i] <- lm(a ~ x2)$coef[2]
a <- y - coefTable$b2[i] * x2
coefTable$b1[i] <- lm(a ~ x1)$coef[2]
coefTable$b0[i] <- lm(a ~ x1)$coef[1]
}
ggplot(coefTable) + geom_line(aes(y = b0)) + geom_line(aes(y = b1)) + geom_line(aes(y = b2))
coefTable <- data.frame(cbind(n = 1:1000, b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
for(i in 1:1000){
a <- y - beta1 * x1
coefTable$b2[i] <- lm(a ~ x2)$coef[2]
a <- y - coefTable$b2[i] * x2
coefTable$b1[i] <- lm(a ~ x1)$coef[2]
coefTable$b0[i] <- lm(a ~ x1)$coef[1]
}
ggplot(coefTable) + geom_line(aes(x = n, y = b0)) +
geom_line(aes(x = n, y = b1)) + geom_line(aes(x = n, y = b2))
y <- rnorm(100, 3, 2)
x1 <- rnorm(100, 0, 1)
x2 <- rnorm(100, -1, 2)
beta1 <- 3
coefTable <- data.frame(cbind(n = 1:1000, b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
for(i in 1:1000){
a <- y - beta1 * x1
beta2 <- lm(a ~ x2)$coef[2]
a <- y - coefTable$b2[i] * x2
beta1 <- lm(a ~ x1)$coef[2]
coefTable$b0[i] <- lm(a ~ x1)$coef[1]
coefTable$b2[i] <- beta2
coefTable$b1[i] <- beta1
}
ggplot(coefTable) + geom_line(aes(x = n, y = b0)) +
geom_line(aes(x = n, y = b1)) + geom_line(aes(x = n, y = b2))
View(coefTable)
y <- rnorm(100, 3, 2)
x1 <- rnorm(100, 0, 1)
x2 <- rnorm(100, -1, 2)
beta1 <- 3
coefTable <- data.frame(cbind(n = 1:1000, b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
for(i in 1:1000){
a <- y - beta1 * x1
beta2 <- lm(a ~ x2)$coef[2]
a <- y - beta2 * x2
beta1 <- lm(a ~ x1)$coef[2]
coefTable$b0[i] <- lm(a ~ x1)$coef[1]
coefTable$b2[i] <- beta2
coefTable$b1[i] <- beta1
}
ggplot(coefTable) + geom_line(aes(x = n, y = b0)) +
geom_line(aes(x = n, y = b1)) + geom_line(aes(x = n, y = b2))
lm(y ~ x1 + x2)
y <- rnorm(100, 3, 2)
x1 <- rnorm(100, 10, 5)
x2 <- rnorm(100, -1, 2)
beta1 <- 3
coefTable <- data.frame(cbind(n = 1:1000, b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
for(i in 1:1000){
a <- y - beta1 * x1
beta2 <- lm(a ~ x2)$coef[2]
a <- y - beta2 * x2
beta1 <- lm(a ~ x1)$coef[2]
coefTable$b0[i] <- lm(a ~ x1)$coef[1]
coefTable$b2[i] <- beta2
coefTable$b1[i] <- beta1
}
ggplot(coefTable) + geom_line(aes(x = n, y = b0)) +
geom_line(aes(x = n, y = b1)) + geom_line(aes(x = n, y = b2))
View(coefTable)
a <- y - beta1 * x1
lm(a ~ x2)
y <- rnorm(100, 3, 2)
x1 <- rnorm(100, 10, 5)
x2 <- rnorm(100, 5, 2)
beta1 <- 3
coefTable <- data.frame(cbind(n = 1:1000, b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
for(i in 1:1000){
a <- y - beta1 * x1
beta2 <- lm(a ~ x2)$coef[2]
a <- y - beta2 * x2
beta1 <- lm(a ~ x1)$coef[2]
coefTable$b0[i] <- lm(a ~ x1)$coef[1]
coefTable$b2[i] <- beta2
coefTable$b1[i] <- beta1
}
ggplot(coefTable) + geom_line(aes(x = n, y = b0)) +
geom_line(aes(x = n, y = b1)) + geom_line(aes(x = n, y = b2))
View(bs_errors)
View(coefTable)
summary(lm(y ~ x1 + x2))
x1 <- rnorm(100, 10, 5)
x2 <- rnorm(100, 5, 2)
y <- 3*x1 + 6*x2 + rnorm(100)
beta1 <- 10
coefTable <- data.frame(cbind(n = 1:1000, b0=rep(0, 1000), b1=rep(0, 1000), b2=rep(0, 1000)))
for(i in 1:1000){
a <- y - beta1 * x1
beta2 <- lm(a ~ x2)$coef[2]
a <- y - beta2 * x2
beta1 <- lm(a ~ x1)$coef[2]
coefTable$b0[i] <- lm(a ~ x1)$coef[1]
coefTable$b2[i] <- beta2
coefTable$b1[i] <- beta1
}
ggplot(coefTable) + geom_line(aes(x = n, y = b0)) +
geom_line(aes(x = n, y = b1)) + geom_line(aes(x = n, y = b2))
ggplot(coefTable) + geom_line(aes(x = n, y = b0), color = "red") +
geom_line(aes(x = n, y = b1), color = "blue") + geom_line(aes(x = n, y = b2), color = "green")
coef(lm(y ~ x1 + x2))
print(coefTable[1000, ])
coef(lm(y ~ x1 + x2))
print(coefTable[1000, ])
head(coefTable)
x1 <- seq(-2, 1, 0.05); y1 <- 1+x1
x2 <- seq(1, 2, 0.05); y2 <- -2*x2^2 + 5*x2 - 1
ggplot() + geom_line(aes(x1, y1)) + geom_line(aes(x2,y2))
diesum <- function(n){}
diesum <- function(n){}
diesum <- function(n){ for(i in 1:n) }
diesum <- function(n){
a=0, b=0
for(i in 1:n) {
m <- sum(sample.int(1:6, size = 3, replace = TRUE))
if(m==9) a=a+1; if(m==10) b=b+1
}
print(a, b)
}
diesum <- function(n){
a=0;b=0
for(i in 1:n) {
m <- sum(sample.int(1:6, size = 3, replace = TRUE))
if(m==9) a=a+1; if(m==10) b=b+1
}
print(a, b)
}
diesum(100)
diesum(1000)
sample.int(1:6, size = 3, replace = TRUE)
sample.int(1:6, size = 3, replace = TRUE)
sample.int(1:6, size = 3, replace = TRUE)
sample.int(6, size = 3, replace = TRUE)
diesum <- function(n){
a=0;b=0
for(i in 1:n) {
m <- sum(sample.int(6, size = 3, replace = TRUE))
if(m==9) a=a+1; if(m==10) b=b+1
}
print(a, b)
}
diesum(100)
diesum <- function(n){
a=0;b=0
for(i in 1:n) {
m <- sum(sample.int(6, size = 3, replace = TRUE))
if(m==9) a=a+1; if(m==10) b=b+1
}
print(a);print(b)
}
diesum(100)
diesum(1000)
diesum(10000)
diesum(1000)
diesum(1000)
diesum <- function(n){
a=0;b=0
for(i in 1:n) {
m <- sum(sample.int(6, size = 3, replace = TRUE))
if(m==9) a=a+1; if(m==10) b=b+1
}
sum(a>b)
}
diesum(1000)
diesum <- function(n){
a=0;b=0
for(i in 1:n) {
m <- sum(sample.int(6, size = 3, replace = TRUE))
if(m==9) a=a+1; if(m==10) b=b+1
}
a>b
}
diesum(1000)
diesum(1000)
diesum(1000)
diesum(1000)
diesum(1000)
x = 0
for(j in 1:1000) x = x + diesum(1000)
x = 0
for(j in 1:1000) x = x + diesum(1000)
pnorm(1)
pnorm(1)/5
pbinom(1)/5
dnorm(1)
dnorm(1)/5
dbinom(55, 100, .5)
pnorm(54.5, 55.5)
df <- data.frame(runif(3), runif(3))
names(df) <- c(1, 2)
head(df)
df$"3" <- df$1 + df$2
df$3 <- df$1 + df$2
df$'3' <- df$1 + df$2
df$`3`` <- df$1 + df$2
`
df$`3` <- df$1 + df$2
df$`3` <- df$`1` + df$`2`
View(df)
x <- list(1:10)
x[[2]] <- x
x
gc()
pexp(16, rate = 20)
dexp(16, rate = 20)
pexp(16/20, rate = 20)
dexp(16/20, rate = 2-)
dexp(16/20, rate = 20)
pgamma(16/20, rate = 2-)
pgamma(16/20, rate = 20)
dexp(16, rate = 20)
1 - pexp(16, rate = 20)
1 - pexp(3.75, rate = 3)
pexp(1/3.75, rate = 1/3)
1 - pexp(16/20, rate = 20)
1 - pexp(16/20, rate = 1/3)
ppois(16/20, lambda = 3)
ppois(16/20, lambda = 20)
ppois(16, lambda = 20)
pgamma(60/60, 16, rate = 3)
pgamma(60, 16, rate = 3)
pgamma(60, 16, rate = 30)
pgamma(60, 16, rate = /130)
pgamma(60, 16, rate = 1/30)
pgamma(60, 16, rate = 1/3)
1-dgamma(60, 16, rate = 1/3)
dgamma(60, 16, rate = 1/3)
pgamma(60, 16, rate = 1/3)
pgamma(60, 16, rate = 3)
1 - pexp(3.75, rate = 1/3)
gamma(16, 1/3)
dgamma(16, 1/3)
pgamma(16, 1/3)
pgamma(60, 16, 1/3)
1 - pgamma(16/20, 1, 1/3)
1 - pgamma(16/20, 16, 1/3)
1 - pgamma(60, 16, 1/3)
1 - pgamma(20, 16, 1/3)
1 - pgamma(1, 16, 1/3)
pnorm(3.75, mean = 3, sd = 3/4)
1- pnorm(3.75, mean = 3, sd = 3/4)
1 - pnorm(64, mean=60, sd =144)
1 - pnorm(60, mean=48, sd =144)
pnorm(60, mean=48, sd =12)
1 - pnorm(60, mean=48, sd =12)
1- pgamma(q=60, 16, rate = 1/3)
1- pgamma(q=1, 16, rate =20)
st <- c("apple, 'pear', 3, big")
length(st)
nchar(st)
grepl([a-zA-Z], st)
grepl("[a-zA-Z]", st)
grep("[a-zA-Z]", st)
grep("[a-z]", letters)
grep("[a-z]", st)
strsplit(st, "")
l <- strsplit(st, "")
str(l)
l[1]
l[[1]
]
l[1][1]
l[[1][1]
l[[1]][1]
l[[1]][2]
n1 <- rnomr(n = 100)
n1 <- rnorm(n = 100)
Fn1 <- ecdf(n1)
plot(Fn1)
Fn1(0)
Fn1(2)
Fn1(2)-Fn1(-2)
Fn1(1)-Fn1(-1)
hist(n1)
plot(Fn1)
mean(n1)
median(n1)
p1 <- rpois(n = 100, lambda = 4)
Fp1 <- ecdf(p1)
plot(Fp1)
mean(p1)
library(ggplot2)
p1_df <- as.data.frame(p1)
ggplot(p1_df, aes(p1)) + stat_ecdf(geom = "step")
install.packages("ACSWR")
library(ACSWR)
data(nerve)
nerve_ecdf <- ecdf(nerve)
plot(nerve_ecdf())
plot(nerve_ecdf
)
knots(nerve_ecdf)
plot.ecdf(nerve)
nerve_ecdf(.6)
setwd("~/Google Drive/600-BU-MSSP/613-Spring2019/MA677/MA677Homework/Assignment3")
load("norm_sample.Rdata")
knitr::opts_chunk$set(echo = TRUE)
q4 <- source("norm_sample.Rdata")
load("/Users/stellali/Google Drive/600-BU-MSSP/613-Spring2019/MA677/MA677Homework/Assignment3/norm_sample.Rdata")
q4 <- readRDS("norm_sample.Rdata")
q4
q4_d <- ecdf(q4)
nm <- pnorm(q4)
D <- q4_d(q4) - nm
D
D <- max(q4_d(q4) - nm)
D
ks.test(q4, "pnorm")
q4 <- as.data.frame(q4)
View(q4)
colnames(q4) <- "x"
View(q4)
q4$ecdf <- ecdf(q4$x)
q4$ecdf <- q4_d(q4$x)
View(q4)
q4$nm <- pnorm(q4$x)
q4$D <- q4$ecdf - q4$nm
View(q4)
max(q4$D)
ks.test(q4, "pnorm", mean = 0, sd = 1)
ks.test(q4, "pnorm", mean = 0, sd = 1, "l")
ks.test(q4, "pnorm", mean = 0, sd = 1, alternative = "l")
ks.test(q4, "pnorm", mean = 0, sd = 1, alternative = "t")
plot(q4$ecdf, q4$nm)
ks.test(q4, "pnorm", mean = 0, sd = 1, alternative = "g")
ks.test(q4, "pnorm", mean = 0, sd = 1)
max(q4$D) ^2
sqrt(max(q4$D))
plot(q4_d)
hist(q4)
hist(q4$x)
plot(x = q4$x, y = 1)
plot(x = q4$x, y = rep(1, 25))
hist(q4$x)
hist(q4$x, breaks = 10)
View(q4)
max(abs(q4$D))
mean(q4$x)
sd(q4$x)
max(abs(q1_d(q1) - tr_d))
q1 <- read.delim("maybe_uniform.txt", sep = "", header = F)
q1 <- unlist(q1)
hist(q1)
ks.test(q1, "punif")
q1_d <- ecdf(q1)
tr_d <- rep(0, 12)
for(i in 1:25) tr_d[i] = ifelse(q1[i] < .5, 1.5*q1[i], .75+(q1[i]-.5)*.5)
max(abs(q1_d(q1) - tr_d))
ks.test(q1, "pgamma", rate = 2, shape = 1)
ks.test(q2, "pnorm")
q2 <- read.table("maybe_normal.txt");q2 <- unlist(q2)
hist(q2)
qqnorm(q2)
ks.test(q2, "pnorm", mean = 26, sd = sqrt(4))
ks.test(q2, "pnorm")
ks.test(q4, "pnorm", mean = 0, sd = 1)
ks.test(q4$x, "pnorm", mean = 0, sd = 1)
q4 <- readRDS("norm_sample.Rdata")
q4 <- as.data.frame(q4); colnames(q4) <- "x"
q4_d <- ecdf(q4)
q4 <- readRDS("norm_sample.Rdata")
q4 <- as.data.frame(q4); colnames(q4) <- "x"
q4_d <- ecdf(q4$x)
q4$ecdf <- q4_d(q4$x)
q4$nm <- pnorm(q4$x)
q4$D <- q4$ecdf - q4$nm
max(abs(q4$D))
ks.test(q4$x, "pnorm", mean = 0, sd = 1)
View(q4)
fiji <- read.table("fijiquakes.dat")
View(fiji)
fiji <- read.table("fijiquakes.dat", header = T)
View(fiji)
faithful <- read.table("faithful.dat")
faithful <- read.table("faithful.dat", header = T)
faithful <- read.table("faithful.dat", header = T, skip = 25)
View(faithful)
View(fiji)
hist(fiji$mag)
fiji_d <- ecdf(fiji$mag)
plot(fiji_d)
fiji_d(4.9) - fiji_d(4.3)
eps <- sqrt(log(2/0.05)/2/1000)
eps
diff_mean <- fiji_d(4.9) - fiji_d(4.3)
diff_sd0 <- sqrt(log(2/0.05)/2/1000)
f_d <- ecdf(faithful$waiting)
plot(f_d)
mean(faithful$waiting)
